import numpy as np
import os
import zipfile
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers
from tensorflow.keras import Model
from tensorflow.keras.applications.inception_v3 import InceptionV3

local_weights_file = "C:/Users/Prince_Shaks/Desktop/WorkStation/Exciting/Cat vs Dog (TF)/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5"

pre_trained_model = InceptionV3(input_shape = (150,150,3),
                               include_top = False,
                               weights = None)

pre_trained_model.load_weights(local_weights_file)

for layer in pre_trained_model.layers:
    layer.trainable = False

pre_trained_model.summary()

last_layer =  pre_trained_model.get_layer('mixed7')
last_output = last_layer.output

from tensorflow.keras.optimizers import RMSprop

x = layers.Flatten()(last_output)
x = layers.Dense(1024, activation = 'relu')(x)
x = layers.Dropout(0.2)(x)
x = layers.Dense(1, activation = 'sigmoid')(x)

model = Model(pre_trained_model.input, x)
model.compile(optimizer = RMSprop(lr = 0.0001), loss = 'binary_crossentropy', metrics = ['acc'])

print(len(os.listdir("C:/Users/Prince_Shaks/Desktop/WorkStation/Exciting/Cat vs Dog (TF)/dog vs cat/dataset/training_set/cats")))
print(len(os.listdir("C:/Users/Prince_Shaks/Desktop/WorkStation/Exciting/Cat vs Dog (TF)/dog vs cat/dataset/training_set/dogs")))
print(len(os.listdir("C:/Users/Prince_Shaks/Desktop/WorkStation/Exciting/Cat vs Dog (TF)/dog vs cat/dataset/test_set/cats")))
print(len(os.listdir("C:/Users/Prince_Shaks/Desktop/WorkStation/Exciting/Cat vs Dog (TF)/dog vs cat/dataset/test_set/dogs")))

train_datagen = ImageDataGenerator(rescale=1/255.0)
validation_datagen = ImageDataGenerator(rescale=1/255.0)

training_generator = train_datagen.flow_from_directory(
                    "C:/Users/Prince_Shaks/Desktop/WorkStation/Exciting/Cat vs Dog (TF)/dog vs cat/dataset/training_set",
                    target_size = (150, 150),
                    batch_size = 100,
                    class_mode = 'binary')

validation_generator = validation_datagen.flow_from_directory(
                    "C:/Users/Prince_Shaks/Desktop/WorkStation/Exciting/Cat vs Dog (TF)/dog vs cat/dataset/test_set",
                    target_size = (150, 150),
                    batch_size = 50,
                    class_mode = 'binary')

model.fit_generator(
        training_generator,
        steps_per_epoch = 10,
        epochs = 10,
        validation_data = validation_generator,
        validation_steps = 10,
        verbose = 2)